diff --git a/src/hist.h b/src/hist.h
index ebe6f9a..c2c75b2 100644
--- a/src/hist.h
+++ b/src/hist.h
@@ -67,7 +67,7 @@
 #endif
 
 #ifndef HIST_NUM_OF_BUCKET
-#define HIST_NUM_OF_BUCKET 100
+#define HIST_NUM_OF_BUCKET 10000
 #endif
 
 struct histogram_struct {
diff --git a/src/netlib.c b/src/netlib.c
index 5783e9a..0cbf1cd 100644
--- a/src/netlib.c
+++ b/src/netlib.c
@@ -21,6 +21,10 @@
 # USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
+#include <unistd.h>
+#include <stdio.h>
+#include <limits.h>
+
 char    netlib_id[]="\
 @(#)netlib.c (c) Copyright 1993-2012 Hewlett-Packard Company, 2021 Hewlett Packard Enterprise Development LP. Version 2.6.0";
 
@@ -188,6 +192,12 @@ char    netlib_id[]="\
 #include "netcpu.h"
 #include "netperf_version.h"
 
+
+int LOG[MAX_LOG_SIZE];
+int log_counter = 0;
+
+FILE *log_file;
+
 /****************************************************************/
 /*                                                              */
 /*      Global constants, macros and variables                  */
@@ -1425,6 +1435,19 @@ netlib_init_cpu_map() {
 void
 netlib_init()
 {
+  for(int k=0;k<MAX_LOG_SIZE;k++){
+    LOG[k] = 0;
+  }
+  char filename[100];
+  sprintf(filename,"netserver.log");
+  log_file = fopen(filename,"w+");
+  char cwd[PATH_MAX];
+   if (getcwd(cwd, sizeof(cwd)) != NULL) {
+       printf("Current working dir: %s\n", cwd);
+   } else {
+       perror("getcwd() error");
+       return 1;
+   }
   int i;
 
   where = stdout;
@@ -4286,6 +4309,8 @@ HIST_purge(HIST h) {
 
 void
 HIST_add(register HIST h, int time_delta){
+  LOG[log_counter % MAX_LOG_SIZE] = time_delta;
+  log_counter++;
    register float val;
    register int base = HIST_NUM_OF_BUCKET / 10;
 
diff --git a/src/netlib.h b/src/netlib.h
index b1f4199..e0797b6 100644
--- a/src/netlib.h
+++ b/src/netlib.h
@@ -386,6 +386,7 @@ struct cpu_stats_struct {
  XENIX errors that errno covers.  So on NT this is redefined to be
  Perror and it expands all GetLastError texts. */
 
+#define MAX_LOG_SIZE 1000000
 
 #ifdef WIN32
 /* INVALID_SOCKET == INVALID_HANDLE_VALUE == (unsigned int)(~0) */
diff --git a/src/nettest_omni.c b/src/nettest_omni.c
index 5d63f02..dcdc12b 100644
--- a/src/nettest_omni.c
+++ b/src/nettest_omni.c
@@ -167,6 +167,11 @@ char nettest_omni_id[]="\
 #include "netsh.h"
 #include "nettest_bsd.h"
 
+extern int LOG[MAX_LOG_SIZE];
+// extern int log_counter = 0;
+
+extern FILE *log_file;
+
 /* we only really use this once, but the initial patch to
    src/nettest_bsd.c used it in several places. keep it as a macro
    just for kicks and just in case we do end-up needing to use it
@@ -445,7 +450,7 @@ int         receive_timeout = -1;
 /* min and max "latency" */
 int         min_latency = -1, max_latency = -1;
 /* the percentiles */
-int         p50_latency = -1, p90_latency = -1, p99_latency = -1;
+int         p50_latency = -1, p90_latency = -1, p99_latency = -1, p999_latency = -1, p9999_latency = -1;
 /* mean and stddev - while the mean is reduntant with the *_RR test we
    keep it because it won't be for other tests */
 double      mean_latency = -1.0, stddev_latency = -1.0;
@@ -678,6 +683,8 @@ enum netperf_output_name {
   P50_LATENCY,
   P90_LATENCY,
   P99_LATENCY,
+  P999_LATENCY,
+  P9999_LATENCY,
   MEAN_LATENCY,
   STDDEV_LATENCY,
   LOCAL_SOCKET_PRIO,
@@ -1390,6 +1397,10 @@ netperf_output_enum_to_str(enum netperf_output_name output_name)
     return "P90_LATENCY";
   case P99_LATENCY:
     return "P99_LATENCY";
+  case P999_LATENCY:
+    return "P999_LATENCY";
+  case P9999_LATENCY:
+    return "P9999_LATENCY";
   case MEAN_LATENCY:
     return "MEAN_LATENCY";
   case STDDEV_LATENCY:
@@ -2456,6 +2467,12 @@ print_omni_init_list() {
   set_output_elt(P99_LATENCY, "99th", "Percentile", "Latency", "Microseconds",
 		 "%d", &p99_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_INT32);
 
+  set_output_elt(P999_LATENCY, "99.9th", "Percentile", "Latency", "Microseconds",
+		 "%d", &p999_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_INT32);
+
+  set_output_elt(P9999_LATENCY, "99.99th", "Percentile", "Latency", "Microseconds",
+		 "%d", &p9999_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_INT32);
+
   set_output_elt(MEAN_LATENCY, "Mean", "Latency", "Microseconds", "", "%.2f",
 		 &mean_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_DOUBLE);
 
@@ -5063,6 +5080,14 @@ send_omni_inner(char remote_host[], unsigned int legacy_caller, char header_str[
     p50_latency = HIST_get_percentile(time_hist, 0.50);
     p90_latency = HIST_get_percentile(time_hist, 0.90);
     p99_latency = HIST_get_percentile(time_hist, 0.99);
+    p999_latency = HIST_get_percentile(time_hist, 0.999);
+    p9999_latency = HIST_get_percentile(time_hist, 0.9999);
+
+    //flush the log to a file
+    for(int i=0;i<MAX_LOG_SIZE;i++){
+      fprintf(log_file,"%d\n",LOG[i]);
+      // printf("%d\n",LOG[i]);
+    }
 
   }
 
